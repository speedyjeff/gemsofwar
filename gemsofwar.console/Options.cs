using gemsofwar.engine;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace gemsofwar.console
{
    enum Verb { None, Train, Evaluate, Evolve, Create, Dump, Play, Check };

    class Options
    {
        public Verb Action;
        public bool ShowHelp;
        public string Path;
        public string Input;
        public string Output;
        public int Dimension;
        public int GemCount;
        public int Skip;
        public int Take;
        public int Population;
        public int Generations;
        public GameMode GameMode;

        public static void DisplayHelp()
        {
            Console.WriteLine("./gemsofwar.console [help|-?|evaluate|evolve|createboard|dumpboard|play|check]");
            Console.WriteLine();
            Console.WriteLine("    * train -path <path> -output <filename>");
            Console.WriteLine("      trains a model given an input of .dmp and .dat files");
            Console.WriteLine("         input for training is generated by running gemesofwar.window");
            Console.WriteLine("    * evaluate -input <filename>");
            Console.WriteLine("      evaluates a model given a json file of training data");
            Console.WriteLine("    * evolve -input <filename> -population <number> -generations <number>");
            Console.WriteLine("      uses a genetic algorithm to find the optimal settings given");
            Console.WriteLine("      a json file of training dat");
            Console.WriteLine("       defaults - ");
            Console.WriteLine("         population  : 100");
            Console.WriteLine("         generations : 10");
            Console.WriteLine("    * check -path <path> -input <filename>");
            Console.WriteLine("      loads the model and checks the .dmp with the .dat files");
            Console.WriteLine("         input for training is generated by 'train'");
            Console.WriteLine();
            Console.WriteLine("    * createboard -dimension <number> -gemcount <number>");
            Console.WriteLine("      iterates all possible boards given a dimension and number of possible gem values");
            Console.WriteLine("       warning - ");
            Console.WriteLine("         this action will write a lot of data to disk and may run forever");
            Console.WriteLine("    * dumpboard -input <filename> -skip <number> -take <number>");
            Console.WriteLine("      dump the generated boards created by createboard");
            Console.WriteLine();
            Console.WriteLine("    * play -mode [battle|treasure]");
            Console.WriteLine("      play a round of gemsofwar");
        }

        public static Options Parse(string[] args)
        {
            var options = new Options() { Action = Verb.None, Generations = 10, Population = 100 };

            if (args.Length == 0 || 
                string.Equals(args[0],"help", StringComparison.OrdinalIgnoreCase) || 
                string.Equals(args[0], "-?", StringComparison.OrdinalIgnoreCase) ||
                args[0][0] == '-')
            {
                options.ShowHelp = true;
                return options;
            }

            // verb
            switch(args[0].ToLower())
            {
                case "train": options.Action = Verb.Train; break;
                case "evaluate": options.Action = Verb.Evaluate; break;
                case "evolve": options.Action = Verb.Evolve; break;
                case "createboard": options.Action = Verb.Create; break;
                case "dumpboard": options.Action = Verb.Dump; break;
                case "play": options.Action = Verb.Play; break;
                case "check": options.Action = Verb.Check; break;
                default:
                    options.ShowHelp = true;
                    break;
            }

            // options
            for(int i=1; i<args.Length; i++)
            {
                if (string.Equals(args[i], "-input", StringComparison.OrdinalIgnoreCase))
                {
                    if ((i+1) < args.Length) options.Input = args[++i];
                }
                else if (string.Equals(args[i], "-path", StringComparison.OrdinalIgnoreCase))
                {
                    if ((i + 1) < args.Length) options.Path = args[++i];
                }
                else if (string.Equals(args[i], "-output", StringComparison.OrdinalIgnoreCase))
                {
                    if ((i+1) < args.Length) options.Output = args[++i];
                }
                else if (string.Equals(args[i], "-dimension", StringComparison.OrdinalIgnoreCase))
                {
                    if ((i + 1) < args.Length) options.Dimension = Convert.ToInt32(args[++i]);
                }
                else if (string.Equals(args[i], "-gemcount", StringComparison.OrdinalIgnoreCase))
                {
                    if ((i + 1) < args.Length) options.GemCount = Convert.ToInt32(args[++i]);
                }
                else if (string.Equals(args[i], "-skip", StringComparison.OrdinalIgnoreCase))
                {
                    if ((i + 1) < args.Length) options.Skip = Convert.ToInt32(args[++i]);
                }
                else if (string.Equals(args[i], "-take", StringComparison.OrdinalIgnoreCase))
                {
                    if ((i + 1) < args.Length) options.Take = Convert.ToInt32(args[++i]);
                }
                else if (string.Equals(args[i], "-mode", StringComparison.OrdinalIgnoreCase))
                {
                    if ((i + 1) < args.Length)
                    {
                        switch(args[++i].ToLower())
                        {
                            case "battle": options.GameMode = GameMode.Battle; break;
                            case "treasure": options.GameMode = GameMode.Treasure; break;
                            default: Console.WriteLine($"WARN: unknown game mode : {args[i]}"); break;
                        }
                    }
                }
                else if (string.Equals(args[i], "-population", StringComparison.OrdinalIgnoreCase))
                {
                    if ((i + 1) < args.Length) options.Population = Convert.ToInt32(args[++i]);
                }
                else if (string.Equals(args[i], "-generations", StringComparison.OrdinalIgnoreCase))
                {
                    if ((i + 1) < args.Length) options.Generations = Convert.ToInt32(args[++i]);
                }
                else
                {
                    Console.WriteLine($"WARN: unknown command line parameter : {args[i]}");
                }
            }

            // validate
            if (options.Action == Verb.None) options.ShowHelp = true;
            else if (options.Action == Verb.Train &&
                (string.IsNullOrWhiteSpace(options.Path) ||
                string.IsNullOrWhiteSpace(options.Output))) options.ShowHelp = true;
            else if (options.Action == Verb.Evaluate &&
                string.IsNullOrWhiteSpace(options.Input)) options.ShowHelp = true;
            else if (options.Action == Verb.Evolve &&
                (string.IsNullOrWhiteSpace(options.Input) ||
                options.Generations <= 0 ||
                options.Population <= 0)) options.ShowHelp = true;
            else if (options.Action == Verb.Create &&
                (options.Dimension <= 0 || options.GemCount <= 0)) options.ShowHelp = true;
            else if (options.Action == Verb.Dump &&
                (options.Skip <= 0 ||
                options.Take <= 0 ||
                string.IsNullOrWhiteSpace(options.Input))) options.ShowHelp = true;
            else if (options.Action == Verb.Check &&
                (string.IsNullOrWhiteSpace(options.Path) ||
                string.IsNullOrWhiteSpace(options.Input) )) options.ShowHelp = true;

            return options;
        }
    }
}
